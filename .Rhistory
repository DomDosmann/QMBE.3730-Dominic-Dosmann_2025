# Load required libraries
library(tidyverse)
library(factoextra)
library(cluster)
cereal_data <- read.csv("Cereals-1.csv")
cereal_data_clean <- cereal_data %>% drop_na()
cereal_features <- cereal_data_clean %>%
select(-name, -mfr, -type, -weight, -shelf, -cups, -rating)
Step 3: Determine the optimal number of clusters
fviz_nbclust(cereal_features, kmeans, method = "wss") +
labs(subtitle = "Elbow Method")
fviz_nbclust(cereal_features, kmeans, method = "silhouette") +
labs(subtitle = "Silhouette Method")
set.seed(123)
gap_stat <- clusGap(cereal_features, FUN = kmeans, nstart = 25, K.max = 10, B = 50)
gap_stat <- clusGap(cereal_features, FUN = kmeans, nstart = 25, K.max = 10, B = 50)
fviz_gap_stat(gap_stat) +
labs(subtitle = "Gap Statistic")
fviz_nbclust(cereal_features, kmeans, method = "wss") +
labs(subtitle = "Elbow Method")
fviz_nbclust(cereal_features, kmeans, method = "silhouette") +
labs(subtitle = "Silhouette Method")
set.seed(123)
gap_stat <- clusGap(cereal_features, FUN = kmeans, nstart = 25, K.max = 10, B = 50)
gap_stat <- clusGap(cereal_features, FUN = kmeans, nstart = 25, K.max = 10, B = 50)
fviz_gap_stat(gap_stat) +
labs(subtitle = "Gap Statistic")
fviz_gap_stat(gap_stat) +
labs(subtitle = "Gap Statistic")
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)  # Replace 3 with your k
print(kmeans_result$centers)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
Step 2: Create a plot in sugars-calories space
ggplot(cereal_data_clean, aes(x = sugars, y = calories, color = cluster)) +
geom_point(size = 3) +  # Points for each observation
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars, y = calories), color = "red", size = 5, shape = 8) +  # Centers
labs(title = "K-means Clustering of Cereals",
x = "Sugars",
y = "Calories") +
theme_minimal()
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)
print(kmeans_result$centers)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
ggplot(cereal_data_clean, aes(x = sugars, y = calories, color = cluster)) +
geom_point(size = 3) +  # Points for each observation
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars, y = calories), color = "red", size = 5, shape = 8) +  # Centers
labs(title = "K-means Clustering of Cereals",
x = "Sugars",
y = "Calories") +
theme_minimal()
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 2, nstart = 25)
print(kmeans_result$centers)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
ggplot(cereal_data_clean, aes(x = sugars, y = calories, color = cluster)) +
geom_point(size = 3) +  # Points for each observation
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars, y = calories), color = "red", size = 5, shape = 8) +  # Centers
labs(title = "K-means Clustering of Cereals",
x = "Sugars",
y = "Calories") +
theme_minimal()
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)
print(kmeans_result$centers)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
ggplot(cereal_data_clean, aes(x = sugars, y = calories, color = cluster)) +
geom_point(size = 3) +  # Points for each observation
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars, y = calories), color = "red", size = 5, shape = 8) +  # Centers
labs(title = "K-means Clustering of Cereals",
x = "Sugars",
y = "Calories") +
theme_minimal()
# Scale the sugars and calories columns
cereal_data_clean$sugars_scaled <- scale(cereal_data_clean$sugars)
cereal_data_clean$calories_scaled <- scale(cereal_data_clean$calories)
# Perform K-means clustering (replace 2 with your optimal k)
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 2, nstart = 25)  # Replace 2 with your chosen k
# Add the cluster assignment to the data
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
# Plot the scaled data with clusters
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
# Perform K-means clustering (replace 2 with your optimal k)
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)  # Replace 2 with your chosen k
# Add the cluster assignment to the data
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
# Plot the scaled data with clusters
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
# Plot with cluster centers
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars_scaled, y = calories_scaled), color = "red", size = 5, shape = 8) +  # Cluster centers
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
# Scale the sugars and calories columns
cereal_data_clean$sugars_scaled <- scale(cereal_data_clean$sugars)
cereal_data_clean$calories_scaled <- scale(cereal_data_clean$calories)
# Perform K-means clustering (replace 2 with your optimal k)
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)  # Replace 2 with your chosen k
# Add the cluster assignment to the data
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
# Plot the scaled data with clusters
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
# Plot with cluster centers
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars_scaled, y = calories_scaled), color = "red", size = 5, shape = 8) +  # Cluster centers
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
cereal_data_clean$sugars_scaled <- scale(cereal_data_clean$sugars)
cereal_data_clean$calories_scaled <- scale(cereal_data_clean$calories)
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
# Plot with cluster centers
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars_scaled, y = calories_scaled), color = "red", size = 5, shape = 8) +  # Cluster centers
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars_scaled, y = calories_scaled), color = "red", size = 5, shape = 8) +  # Cluster centers
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
cereal_data_clean$sugars_scaled <- scale(cereal_data_clean$sugars)
cereal_data_clean$calories_scaled <- scale(cereal_data_clean$calories)
set.seed(123)
kmeans_result <- kmeans(cereal_features, centers = 3, nstart = 25)
cereal_data_clean$cluster <- as.factor(kmeans_result$cluster)
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
geom_point(data = as.data.frame(kmeans_result$centers),
aes(x = sugars_scaled, y = calories_scaled), color = "red", size = 5, shape = 8) +  # Cluster centers
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
ggplot(data = cereal_data_clean, aes(x = sugars_scaled, y = calories_scaled, color = cluster)) +
geom_point(size = 2.5) +
labs(title = "K-means Clustering of Cereals (Scaled Sugars vs Calories)",
x = "Scaled Sugars",
y = "Scaled Calories") +
theme_minimal()
bathsoap_data <- read.csv("BathSoapHousehold.csv")
setwd("/Users/domin/OneDrive/Documents/Data Mining")
knitr::opts_chunk$set(echo = TRUE)
bathsoap_data <- read.csv("BathSoapHousehold.csv")
head(bathsoap_data)
str(bathsoap_data)
bathsoap_data_scaled <- bathsoap_data %>%
select(CHILD, Affluence.Index) %>%
scale()  # Scale the data
bathsoap_data_scaled <- bathsoap_data %>%
select(CHILD, Affluence.Index) %>%
scale()
library(dplyr)
bathsoap_data_scaled <- bathsoap_data %>%
select(CHILD, Affluence.Index) %>%
scale()
# Elbow Method
wss <- numeric(10)
for (k in 2:10) {
kmeans_model <- kmeans(bathsoap_data_scaled, centers = k, nstart = 25)
sil_width[k] <- silhouette(kmeans_model$cluster, dist(bathsoap_data_scaled))[, 3]
}
# Elbow Method
wss <- numeric(10)
for (k in 1:10) {
kmeans_model <- kmeans(bathsoap_data_scaled, centers = k, nstart = 25)
wss[k] <- kmeans_model$tot.withinss
}
plot(1:10, wss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters",
ylab = "Total within-cluster sum of squares")
# Silhouette Method
library(cluster)
sil_width <- numeric(10)
for (k in 2:10) {
kmeans_model <- kmeans(bathsoap_data_scaled, centers = k, nstart = 25)
sil_width[k] <- silhouette(kmeans_model$cluster, dist(bathsoap_data_scaled))[, 3]
}
plot(2:10, sil_width[2:10], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters",
ylab = "Silhouette Width")
```
# Silhouette Method
library(cluster)
for (k in 2:10) {
kmeans_model <- kmeans(bathsoap_data_scaled, centers = k, nstart = 25)
sil_width[k] <- silhouette(kmeans_model$cluster, dist(bathsoap_data_scaled))[, 3]
}
sil_width <- numeric(10)
for (k in 2:10) {
kmeans_model <- kmeans(bathsoap_data_scaled, centers = k, nstart = 25)
sil_width[k] <- silhouette(kmeans_model$cluster, dist(bathsoap_data_scaled))[, 3]
}
plot(2:10, sil_width[2:10], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters",
ylab = "Silhouette Width")
library(clusterStats)
plot(2:10, sil_width[2:10], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters",
ylab = "Silhouette Width")
```
plot(2:10, sil_width[2:10], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters",
ylab = "Silhouette Width")
```
install.packages("clusterstats")
library(clusterStats)
install.packages("clusterstats")
gap_stat <- clusGap(bathsoap_data_scaled, FUN = kmeans, K.max = 10, B = 50)
plot(gap_stat, main = "Gap Statistics for Optimal K")
set.seed(123)
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 5, nstart = 25)  #
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
library(ggplot2)
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children (CHILD)",
y = "Affluence Index") +
theme_minimal()
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children (CHILD)",
y = "Affluence Index") +
theme_minimal()
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 3, nstart = 25)  #
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
library(ggplot2)
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children (CHILD)",
y = "Affluence Index") +
theme_minimal()
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 8, nstart = 25)  #
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
library(ggplot2)
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children (CHILD)",
y = "Affluence Index") +
theme_minimal()
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children",
y = "Affluence Index") +
theme_minimal()
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children",
y = "Affluence Index") +
theme_minimal()
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children",
y = "Affluence Index") +
theme_minimal()
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 5, nstart = 25)  #
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
library(ggplot2)
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children",
y = "Affluence Index") +
theme_minimal()
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 3, nstart = 25)  #
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
library(ggplot2)
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers",
x = "Number of Children",
y = "Affluence Index") +
theme_minimal()
install.packages("factoextra")  # If not already installed
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library(factoextra)
library(ggplot2)
library(factoextra)
# Perform k-means clustering with the chosen number of clusters (e.g., k = 3)
set.seed(123)
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 3, nstart = 25)  # Replace 3 with your chosen k
fviz_cluster(kmeans_result, data = bathsoap_data_scaled, geom = "point",
ellipse.type = "norm",
ggtheme = theme_minimal(),
main = "K-means Clustering of Bathsoap Customers")
kmeans_result <- kmeans(bathsoap_data_scaled, centers = 3, nstart = 25)  # Replace 3 with your optimal k
# Add the cluster assignments back to the original data
bathsoap_data$cluster <- as.factor(kmeans_result$cluster)
# Visualize clusters using the original (unscaled) CHILD and Affluence Index
fviz_cluster(kmeans_result,
data = bathsoap_data_scaled,
geom = "point",
ellipse.type = "norm",
ggtheme = theme_minimal(),
main = "K-means Clustering of Bathsoap Customers",
xlab = "CHILD (Original Values)",
ylab = "Affluence Index (Original Values)")
# Alternatively, plot using ggplot with original data and cluster assignments
ggplot(bathsoap_data, aes(x = CHILD, y = Affluence.Index, color = cluster)) +
geom_point(size = 3) +
labs(title = "K-means Clustering of Bathsoap Customers (Original Values)",
x = "Number of Children (CHILD)",
y = "Affluence Index") +
theme_minimal()
# Assuming kmeans_result is your clustering result and bathsoap_data contains the original data
# Add the cluster assignments to the original dataset
bathsoap_data <- bathsoap_data %>%
mutate(cluster = kmeans_result$cluster)
# Group by the cluster and summarize the average Value and Total Volume
cluster_summary <- bathsoap_data %>%
group_by(cluster) %>%
summarize_at(vars(Value, Total.Volume), list(mean = mean))
# View the summary
print(cluster_summary)
bathsoap_data <- bathsoap_data_scaled %>%
mutate(cluster = kmeans_result$cluster)
library(dplyr)
bathsoap_data <- bathsoap_data %>%
mutate(cluster = kmeans_result$cluster)
# Group by the cluster and summarize the average Value and Total Volume
cluster_summary <- bathsoap_data %>%
group_by(cluster) %>%
summarize_at(vars(Value, Total.Volume), list(mean = mean))
# View the summary
print(cluster_summary)
# View the summary
print(cluster_summary)
#Install Packages
install.packages("cluster")
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
bathsoap_data <- bathsoap_data %>%
mutate(cluster = kmeans_result$cluster)
# Group by the cluster and summarize the average Value and Total Volume
cluster_summary <- bathsoap_data %>%
group_by(cluster) %>%
summarize_at(vars(Value, Total.Volume), list(mean = mean))
# View the summary
print(cluster_summary)
setwd("/Users/domin/OneDrive/Documents/Data Mining")
install.packages("clusterstats")
install.packages("clusterstats")
install.packages("cluster")
install.packages("tidyverse")
install.packages("tidyverse")
library(clusterStats)
setwd("C:/Users/domin/OneDrive/Desktop/GitHub/QMBE.3730-Dominic-Dosmann_2025")
data <- read.csv("netflix_titles.csv")
Netflix <- read.csv("netflix_titles.csv")
head(Netflix)
setwd("C:/Users/domin/OneDrive/Desktop/GitHub/QMBE.3730-Dominic-Dosmann_2025")
knitr::opts_chunk$set(echo = TRUE)
Netflix <- read.csv("netflix_titles.csv")
head(Netflix)
summary(Netflix)
install.packages(c("tidyverse", "ggplot2", "dplyr", "summarytools"))
install.packages(c("tidyverse", "ggplot2", "dplyr", "summarytools"))
install.packages(c("tidyverse", "ggplot2", "dplyr", "summarytools"))
install.packages(c("tidyverse", "ggplot2", "dplyr", "summarytools"))
install.packages(c("tidyverse", "ggplot2", "dplyr", "summarytools"))
library(tidyverse)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(summarytools)
library(tidyverse)
library(ggplot2)
library(summarytools)
Netflix <- read.csv("netflix_titles.csv")
summary(Netflix)
plot(Netflix)
str(Netflix)
summary(Netflix)
ggplot(Netflix, aes(x = column_name)) +
geom_histogram(binwidth = 10, fill = "blue", color = "white") +
labs(title = "Distribution of column_name", x = "column_name", y = "Frequency")
ggplot(Netflix, aes(x = column_name)) +
geom_histogram(binwidth = 10, fill = "blue", color = "white") +
labs(title = "Distribution of ", x = "type", y = "duration")
ggplot(Netflix, aes(x = rating)) +
geom_histogram(binwidth = 10, fill = "blue", color = "white") +
labs(title = "Distribution of ", x = "type", y = "duration")
# Bar plot for a single categorical variable
ggplot(data, aes(x = factor(column_name))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(rating))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(release year))) +
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(release_year))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(duration))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(title))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Count") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Frequency of Categories in column_name", x = "Category", y = "Amount") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Freuquency of entertainment type", x = "Category", y = "Amount") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Freuquency of entertainment type", x = "Type", y = "Amount") +
theme_minimal()
summary(Netflix)
colnames(Netflix)
summary(Netflix)
str(Netflix)
head(Netflix)
head(Netflix)
tail(Netflix)
## Tables
```{r pressure, echo=FALSE}
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Freuquency of entertainment type", x = "Type", y = "Amount") +
theme_minimal()
# Bar plot for a single categorical variable
ggplot(Netflix, aes(x = factor(type))) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Freuquency of entertainment type", x = "Type", y = "Amount") +
theme_minimal()
colnames(Netflix)
summary(Netflix)
head(Netflix)
tail(Netflix)
